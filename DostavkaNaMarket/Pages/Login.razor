@page "/login"

@using DostavkaNaMarket.Authentication
@inject UserAccountService userAccountService
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager
@inject IJSRuntime js


@using DostavkaNaMarket.Models
@using DostavkaNaMarket.Pages
@using MongoDB.Bson
@using MongoDB.Driver

@using Microsoft.AspNetCore.Authorization
@using System.ComponentModel.DataAnnotations


<div class="text-center">
    
<main class="form-signin">

    <div class="row">
        <div class="col">
        </div>
        <div class="col-3">
            <img class="mb-4" src="/Admin.svg" alt="" width="200" height="200">

            <EditForm Model="model" OnValidSubmit="Authenticate">
                <DataAnnotationsValidator/>
                <div class="form-floating">
                  <InputText class="form-control" placeholder="name@example.com" @bind-Value="model.UserName"/>
                  <label for="floatingInput">Логин</label>
                  <ValidationMessage For="(() => model.UserName)" />
                </div>
                <div class="form-floating">
                  <InputText class="form-control" placeholder="Password" @bind-Value="model.Password"/>
                  <label for="floatingPassword">Пароль</label>
                  <ValidationMessage For="(() => model.Password)" />
                </div>

                <div class="checkbox mb-3">
                  <label>
                    <input type="checkbox" value="remember-me"> Запомнить меня
                  </label>
                </div>
            <button class="w-100 btn btn-lg btn-primary" type="submit">Войти</button>
            </EditForm>
            

            
            <p class="mt-5 mb-3 text-muted">© 2021–2022 Доставка на маркет</p>       
                </div>
        <div class="col">
        </div>
    </div>

    
</main>

</div>

@code {
    private class Model
    {
        [Required(ErrorMessage = "Поле обязательно для заполнения")]
        public string UserName { get; set; }

        [Required(ErrorMessage = "Поле обязательно для заполнения")]
        public string Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        var userAccount = userAccountService.GetByUserName(model.UserName);
        if (userAccount == null || userAccount.Password != model.Password)
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var customAuthStateProvider = (CustomAuthStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
            {
                UserName = userAccount.UserName,
                Role = userAccount.Role
            });
        navManager.NavigateTo("/admin", true);
    }
}
